import copy
from random import *
import time
import math
from Job import Job
from Machine import Machine

# Constants

MAX_NUM_OF_JOBS = 1000
MIN_NUM_OF_JOBS = 1

file_times = (time.time()/10000)

debug_file = open("debugout.txt", "w")

jobs = [None]

# returns the total number of machines that will be in use , and a raw jobs data
def handleInput():
    if input("Would you like to generate a new input file? Y/N\n") == "Y":
        num_of_machines = int(input("Please enter the number of machines: \n"))
        min_processing_time = int(input("Please enter the minimum processing time for a single job: \n"))
        max_processing_time = int(input("Please enter the maximum processing time for a single job: \n"))
        num_of_jobs = int(input("Please enter the number of jobs: \n"))

        print("max process time is :", max_processing_time)
        """
         Generate the soon-to-be input file
         input file format will be :
         NUMBER_OF_MACHINES
         JOB_INDEX JOB_SIZE 
         notice that the total number of jobs will be indicated in the [n-1,0] cell
        """
        inpt = open("input.txt", 'w')

        inpt.write(str(num_of_machines))
        inpt.write("\n")

        # # Generate random number of jobs
        print("number of jobs generated: ", num_of_jobs)
        jobs = []
        for index in range(0, num_of_jobs):
            j = []
            j.append(index)
            job_size = randint(int(min_processing_time), int(max_processing_time))
            j.append(job_size)
            inpt.write(str(index))
            inpt.write(" ")
            inpt.write(str(job_size))
            inpt.write(" ")
            inpt.write("\n")
            jobs.append(j)

        inpt.close()

    else:
        inpt = open("input.txt", 'r')
        jobs = []
        for index, line in enumerate(inpt):
            if index == 0:
                num_of_machines = int(line)
                print("The number of machines loaded : ", line, "\n")
            else:
                jobs.append(line.split())

        inpt.close()

    return num_of_machines, jobs

     
num_of_machines, raw_jobs = handleInput()
num_of_jobs = len(raw_jobs)

# output file and first prints
out_file = open("output_"+str(num_of_machines)+"machines_"+str(num_of_jobs)+"jobs_"+str(file_times)+".txt", "w")

print("Number of Machines:",num_of_machines,file=out_file)
print(num_of_jobs,"jobs:",file=out_file)
for job in raw_jobs:
    print(job,file=out_file)

print("---------------------------------",file=out_file)


# Creates and returns a machines list
def createMachines():
    machines = []
    for i in range(0, num_of_machines):
        cur_machine = Machine(i)
        machines.append(cur_machine)
    return machines


# Create and returns a list of jobs objects
def createJobs():
    jobs_list = []
    for job in raw_jobs:
        cur_job = Job(int(job[0]), int(job[1]))
        print("Created job: index:", cur_job.index, "processing_time:", cur_job.processing_time, file=debug_file)
        jobs_list.append(cur_job)
    print("-----------------FINISHED CREATING JOB OBJECTS----------------------\n\n", file=debug_file)
    return jobs_list


machines_list = createMachines()
jobs_list = createJobs()


#initialization - every job at the first machine
def initialAssign():
    for j in jobs_list:
            machines_list[0].addJob(j)
        

# returns the makespan
def finalMakeSpan():
    max_span = 0
    for machine in machines_list:
        if machine.span > max_span:
            max_span = machine.span
    return max_span


# Print machines' stats
def printMachineStat():
    print("---------------MACHINES STATS--------------------------\n", file=debug_file)
    for machine in machines_list:
        cur_job_list = machine.retrieveJobsList()
        print("machine # ", machine.number, "assigned jobs #:", file=debug_file)
        l = []
        for job in cur_job_list:
            l.append(job)
        print("".join(str(l)), file=debug_file)

        print("Makespan : ", machine.span, file=debug_file)
    print("Max makespan is : ", finalMakeSpan(), file=debug_file)
    print("------------------------------------------------\n", file=debug_file)

# Print machines' stats to file
def printMachineStatOut(action):
    print("---------------MACHINES STATS # %s %s--------------------------\n" % (
    printMachineStatOut.out_stat_counter, action), file=out_file)
    for machine in machines_list:
        cur_job_list = machine.retrieveJobsList()
        print("machine number ", machine.number, "assigned jobs [processing_time,index]:", file=out_file)
        l = []
        for job_number, job in cur_job_list.items():
            l.append(job)
        print("".join(str(l)), file=out_file)

        
        print("Makespan : ", machine.span, file=out_file)
        print("\n", file=out_file)
    print("Max makespan is : ", finalMakeSpan(), file=out_file)
    print("------------------------------------------------\n", file=out_file)
    printMachineStatOut.out_stat_counter = printMachineStatOut.out_stat_counter + 1


printMachineStatOut.out_stat_counter = 0

#Print the stats of the machines
def printMachineStatConsole():
    print("---------------MACHINES STATS--------------------------\n")
    for machine in machines_list:
        cur_job_list = machine.retrieveJobsList()
        print("machine # ", machine.number, "assigned jobs #:")
        l = []
        for job in cur_job_list:
            l.append(job)
        print("".join(str(l)))

        print( "Makespan : ", machine.span)
    print("Max makespan is : ", finalMakeSpan())
    print("------------------------------------------------\n")


def removeAllJobs():
    for machine in machines_list:
        cur_jobs = dict(machine.assigned_jobs)
        for key, job in cur_jobs.items():
            if key != job.index:
                print("SOMETHING WENT WRONG")
            num = job.index
            machine.removeJob(num)
            print("REMOVED  -- machine#: ", machine.number, "assigned jobs: ", job)

    print("---------------MACHINES' REMAINING JOB LISTS-----------------------\n")

    for machine in machines_list:
        cur_jobs = dict(machine.assigned_jobs)
        for key, job in cur_jobs.items():
            if key != job.index:
                print("SOMETHING WENT WRONG")
            num = job.index
            print("LEFT  -- machine#: ", machine.number, "assigned jobs: ", job)



#A method for moving a job
#parameters: origin machine , a single job to move , a target machine
#returns : True if successful , else False

def moveJob(origin_machine: Machine, target_machine: Machine, job_to_move: Job):
    if target_machine.span + job_to_move < origin_machine.span:  # move job if it is useful
      cur_job = origin_machine.retrieveJob(job_to_move)
      origin_machine.removeJob(job_to_move)     
      target_machine.addJob(cur_job)
      return True
    else:
         return False

# Swap between 2 jobs from origin to target
def swapJobs(origin_machine: Machine, target_machine: Machine, origin_job, target_job):
    if target_machine.span <= origin_machine.span:   #swap two jobs even if the machines have the same span
       temp = origin_machine.retrieveJob(origin_job)
       origin_machine.removeJob(origin_job)
       target_machine.addJob(temp)
       temp = target_machine.retrieveJob(target_job)
       target_machine.removeJob(target_job)
       origin_machine.addJob(temp)
       return True
    else:
       return False


# Check if we should do the swap
def checkSwapSpan(origin_machine: Machine, target_machine: Machine, origin_job, target_job):
    cur_span = finalMakeSpan()
    origin_span = origin_machine.span
    target_span = target_machine.span
    local_max_span = max(origin_span, target_span)
    origin_job_span = jobs_list[origin_job].processing_time
    target_job_span = jobs_list[target_job].processing_time
    new_local_max_span = max(origin_span - origin_job_span + target_job_span,
                             target_span - target_job_span + origin_job_span)   # find the max between the machines after the swap
    if new_local_max_span < cur_span:  # by swapping the jobs we won't exceed the current makespan
        if new_local_max_span < local_max_span:
            return True
        else:
            return False
    else:
        return False

# Check if a move is at least as good as current state .
def checkMoveSpan(origin_machine: Machine, target_machine: Machine, job_to_move):
    cur_span = finalMakeSpan()
    origin_span = origin_machine.span
    target_span = target_machine.span
    local_max_span = max(origin_span, target_span)
    job_span = jobs_list[job_to_move].processing_time
    new_local_max_span = max(origin_span - job_span, target_span + job_span)
    if cur_span == target_span:
        return False  # assuming job processing_time is at least 1 , it won't be good to move to that machine, which is already at max span
    elif cur_span > target_span + job_span:  # by moving the job we won't exceed the current max span
        if new_local_max_span < local_max_span:  # if still making an improvement
            return True
        else:
            return False
    else:
        return False

# Checks if a move is legal
def isLegalMove(target_machine: Machine,origin_machine: Machine):
    check1 = target_machine.span
    check2 = origin_machine.span
    if check1 < check2 :      #check if the move caused the span of the target machine be larger the the origin's span
        return True  
    else:  
        return False

# Check if a certain 1-1 swap is legal
def isLegalSwap(origin_machine: Machine, target_machine: Machine):
    origin_count = origin_machine.span
    target_count = target_machine.span
    if origin_count > target_count:
        return True  # check if the swap cause the spans of the machine be larger than before
    if origin_count == target_count:  # same job is always legal (might not be worth it )
        return True
    return False

# if all done return True, else return False
def isDone(d_list):
    return all(item is False for item in d_list)


def oneJobRoutine():
    done = False
    while not done:
        prev_makespan = finalMakeSpan()

        done_list = [
                        False] * num_of_machines  # for checking if at least one job has moved in the last machine iteration
        for index, machine in enumerate(machines_list):
            for job_number, job in machine.assigned_jobs.copy().items():
                for i in range(1, num_of_machines):
                    if isLegalMove(machines_list[(machine.number + i) % num_of_machines],machines_list[(machine.number +i + 1) % num_of_machines]):
                        move_or_not_to_move = checkMoveSpan(machine,
                                                            machines_list[(machine.number + i) % num_of_machines],
                                                            job_number)
                        if move_or_not_to_move is True:
                            moved = moveJob(machine, machines_list[(machine.number + i) % num_of_machines], job_number)
                            if moved is True:
                                if done_list[machine.number] is False:
                                    done_list[machine.number] = True
                            break

            if num_of_jobs <= 500:
                printMachineStatOut("Moving one job")
            if prev_makespan > finalMakeSpan():
                print("makespan: ", finalMakeSpan(), file=debug_file)
                prev_makespan = finalMakeSpan()


            if isDone(done_list):
                done = True
                break



def oneByOneSwapRoutine():
    done = False
    while not done:
        prev_makespan = finalMakeSpan()
        no_swap_count = len(jobs_list)
        done_list = [
                        False] * num_of_machines  # for checking if at least one job has moved in the last machine iteration
        for index, machine in enumerate(machines_list):  # origin machine
            for job_number, job in machine.assigned_jobs.copy().items():  # origin job
                move_at_least_once = False
                break_flag = False
                for i in range(1, num_of_machines):
                    target_machine = machines_list[(machine.number + i) % num_of_machines]
                    for target_job_number, target_job in target_machine.assigned_jobs.copy().items():
                        moved = False
                        if isLegalSwap(machine, target_machine, ):  # check if origin machine can accept target job and if target machine can accept origin job
                            move_or_not_to_move = checkSwapSpan(machine,
                                                                target_machine,
                                                                job_number, target_job_number)

                            if move_or_not_to_move is True:
                                moved = swapJobs(machine, target_machine, job_number, target_job_number)
                                move_at_least_once = True
                                if moved is True:
                                    break_flag = True
                                    break
                    if break_flag is True:
                        break

                if move_at_least_once is False:
                    no_swap_count = no_swap_count - 1


            if num_of_jobs <= 500:
                printMachineStatOut("Swapping jobs 1 by 1 with 2 machine")
            if prev_makespan > finalMakeSpan():
                print("makespan: ", finalMakeSpan(), file=debug_file)
                prev_makespan = finalMakeSpan()


        if no_swap_count == 0:
            done = True
            break

# Checks if all machines are odd so we can stop the run(deleted in the meantime)

# Main routine
def localSearch():
    printMachineStatOut("Initial state")

    prev = finalMakeSpan()
    odd = False
    while not odd:
        oneJobRoutine()
        oneByOneSwapRoutine()
       #odd = isOdd()      not used right now
        if finalMakeSpan() < prev:
            prev = finalMakeSpan()
        else:
            break


sum_of_jobs = sum(x.processing_time for x in jobs_list)
avg_job = sum_of_jobs/num_of_machines

initialAssign()

printMachineStat()
localSearch()

printMachineStatOut("Final state")

debug_file.close()
out_file.close()
